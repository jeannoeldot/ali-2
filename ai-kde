#!/bin/bash

#-------------------------------------------------------------------------------
# ai-kde
# Appelé par ai-de
#
# Ce script installe KDE
# et ne fonctionne qu'avec la langue FR (fr_FR)
#
#-------------------------------------------------------------------------------

#ARCHLINUX INSTALL
    # 15 DESKTOP ENVIRONMENT {{{
    install_desktop_environment() {
        # KDE {{{
        print_title "KDE - https://wiki.archlinux.org/index.php/KDE"
        print_info "KDE est constitué d'un grand nombre d'applications individuelles et d'un espace de travail de bureau comme un shell pour exécuter ces applications."
        # KDE BASE {{{
        package_install "kdebase kde-l10n-$LANGUAGE_KDE"
        # Dépendances optionnelles pour qt
        package_install "icu"
        # KDE UTILS {{{
        print_info_cyan "Installation de KDE Utils"
        package_install "kdeutils-ark kdeutils-filelight kdeutils-kcalc kdeutils-kcharselect kdeutils-kdf"
        # KDE LOOK {{{
        print_info_cyan "Installation de KDE Look"
	package_install "oxygen-gtk2 oxygen-gtk3"
        package_install "qtcurve-gtk2 qtcurve-kde4"
        # KDE PLASMA {{{
        print_info_cyan "Installation de KDE Plasma Addons Applets"
	package_install "kdeplasma-addons-applets-notes kdeplasma-addons-applets-showdesktop"
        # KDE MULTIMEDIA {{{
        print_info_cyan "Installation de KDE Multimedia"
	package_install "kdemultimedia-kmix kdemultimedia-kscd kdemultimedia-audiocd-kio kio-mtp"
	package_install "libdvdcss libdvdread libdvdnav"
        # KDE GRAPHICS {{{
        print_info_cyan "Installation de KDE Graphiques"
	package_install "kdegraphics-gwenview kdegraphics-kcolorchooser kdegraphics-kolourpaint kdegraphics-ksnapshot kdegraphics-okular kdegraphics-svgpart kdegraphics-thumbnailers kdegraphics-mobipocket"
	package_install "kipi-plugins"
        # KDE NETWORK {{{
        print_info_cyan "Installation de KDE Réseau"
	package_install "kdenetwork-kget kwebkitpart"
        # KDE SDK {{{
        print_info_cyan "Installation de KDE Sdk"
        package_install "kdesdk-dolphin-plugins kdesdk-kioslaves kdesdk-kompare kdesdk-okteta kdesdk-kate kdesdk-poxml kdebindings-python2 kdebindings-python"
        # KDE FONTS {{{
        print_info_cyan "Installation de KDE Polices TTF"
	package_install "ttf-dejavu ttf-freefont ttf-liberation ttf-linux-libertine ttf-droid ttf-ubuntu-font-family ttf-oxygen"
        # LSB-RELEASE {{{
        print_info_cyan "Installation de lsb-release"
        package_install "lsb-release"
	#
        is_package_installed "cups" && package_install "kdeutils-print-manager xdg-user-dirs"
#package_install "kde-telepathy telepathy"
        #}}}
##
# TODO
##
# A SUPPRIMER QUAND systemctl enable vboxservice.service NE PROVOQUERA PLUS DE KERNEL PANIC A L'ARRET
        # VBOX SHARED FOLDER AUTO {{{
        # SI INSTALLATION DANS VIRTUALBOX
        if [[ $IN_VIRTUAL_BOX -eq 1 ]]; then
            print_info_cyan "Montage Automatique de VBox Shared Folder pour JND."
            read_input_text "Monter automatiquement VBox Shared Folder pour JND ?"
            if [[ $OPTION == o ]]; then
                mkdir -p /home/${USERNAME}/vbox-shared-folder
                chown -R ${USERNAME}:users /home/${USERNAME}/vbox-shared-folder
                user_uid=`id -u ${USERNAME}`
                user_gid=`id -g ${USERNAME}`
                echo -e '\n# Shared Folders as Arch Linux Guest' >> /etc/fstab
                echo -e '90-Partage     /home/jnd/vbox-shared-folder    vboxsf  uid='"$user_uid"',gid='"$user_gid"',rw,dmode=700,fmode=600,comment=systemd.automount       0 0' >> /etc/fstab
                pause_function
            fi
        fi
        # LM_SENSORS SI PAS DANS VIRTUALBOX
        if [[ $IN_VIRTUAL_BOX -eq 0 ]]; then
            if is_package_installed "lm_sensors" ; then
                print_info_cyan "LM_SENSORS - sensors-detect : détections des capteurs."
                pause_function
                sensors-detect
                systemctl enable lm_sensors.service
            fi
        fi
        #}}}
        #KDE CUSTOMIZATION {{{
        install_icon_theme() { #{{{
            package_install "gtk-update-icon-cache"
            print_warning "\nURL hycons-icon-theme non valide. http://dl.dropbox.com/u/153284/Hycons.tar.gz"
            aur_package_install "hycons-icon-theme"
            gtk-update-icon-cache -f /usr/share/icons/Hycons
        } #}}}
        install_kdeartwork() { #{{{
            print_info_cyan "Installation de KDE ARTWORK (partie 1)"
            package_install "kdeartwork-colorschemes kdeartwork-desktopthemes kdeartwork-emoticons kdeartwork-iconthemes"
            print_info_cyan "Installation de KDE ARTWORK (partie 2)"
            # KDE 4.12 : kdeartwork-sounds has been removed from the KDE SC.
            package_install "kdeartwork-kscreensaver kdeartwork-styles kdeartwork-wallpapers kdeartwork-weatherwallpapers"
        } #}}}
        while true
        do
            print_title "PERSONNALISATION DE KDE"
            echo " 1) $(menu_item "hycons-icon-theme" "KDE Icones") $AUR"
            echo " 2) $(menu_item "kdeartwork-colorschemes" "KDE ARTWORK")"
            echo ""
            echo " f) FINI"
            echo ""
            KDE_OPTIONS+=" f"
            read_input_options "$KDE_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        install_icon_theme
                        OPT=1
                        ;;
                    2)
                        install_kdeartwork
                        OPT=2
                        ;;
                    "f")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
        elihw
        done
        #}}}
	echo "LANG=$LANGUAGE.utf8" >> /etc/environment
	mkdir -p /home/${USERNAME}/.compose-cache
	chown -R ${USERNAME}:users /home/${USERNAME}/.compose-cache
        echo -e "\n"
        # Enable kdm.service
        systemctl enable kdm.service
        echo -e "\n"
#        # Application development toolkit for controlling system-wide privileges
#	systemctl enable polkit.service
        echo -e "\n"
        # Abstraction for enumerating power devices, listening to device events and querying history and statistics
        systemctl enable upower.service
        echo -e "\n"
        # Mise en place d'un drop-in pour kdm.service si carte nvivia et drivers nvidia installé
        # https://bbs.archlinux.org/viewtopic.php?id=173153. brain0    Developer
        if is_package_installed "nvidia" ; then
            print_info_cyan "Carte Vidéo Nvidia : Mise en place d'un drop-in pour kdm.service."
            read_input_text "Mettre en place un drop-in pour kdm.service ?"
            if [[ $OPTION == o ]]; then
                cp -v ai-fconfig/etc-udev-rules.d-99-make-udev-drm-aware.rules /etc/udev/rules.d/99-make-udev-drm-aware.rules
                mkdir -p /etc/systemd/system/kdm.service.d
                cp -v ai-fconfig/etc-systemd-system-kdm.service.d-10-wait-for-card.conf /etc/systemd/system/kdm.service.d/10-wait-for-card.conf
            fi
        fi
        #
        KDE=1
        pause_function
    }
    #}}}
    # 16 CONNMAN/NETWORKMANAGER/WICD {{{
    install_nm_wicd() {
        print_title "GESTIONNAIRE DE RÉSEAU"
        echo " 1) networkmanager"
        echo " 2) wicd"
        echo " 3) ConnMan"
        echo ""
        echo " a) AUCUN"
        echo ""
        read_input $NETWORKMANAGER
        case "$OPTION" in
            1)
                print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
                print_info "NetworkManager est un outil de gestion du réseau. Il est aussi utile pour les liaisons filaires que sans fils, il supporte les modems et certains type de VPN."
                package_install "networkmanager kdeplasma-applets-plasma-nm"
                is_package_installed "ntp" && package_install "networkmanager-dispatcher-ntpd"
#                groupadd networkmanager
#                gpasswd -a ${USERNAME} networkmanager
                #Network Management daemon
		systemctl disable dhcpcd.service
                systemctl disable network_ip_statique.service
                systemctl disable netcfg
                systemctl enable NetworkManager.service
                pause_function
                ;;
            2)
                print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
                print_info "Wicd est un gestionnaire de connexions réseau (sans fil et filaire) similaire à NetworkManager."
                package_install "wicd"
##
# A REVOIR wicd-kde sur un repo perso
# TODO
##
		echo -e  "Pour installer wicd-kde, ouvrir une console en USER et taper les commandes suivantes"
		echo -e  "yaourt --noconfirm -S wicd-kde"
		pause_function
                #wicd daemon
		systemctl disable dhcpcd.service
                systemctl disable network_ip_statique.service
                systemctl disable netcfg
                systemctl enable wicd.service
                pause_function
                ;;
            3)
                print_title "CONNMAN - https://wiki.archlinux.org/index.php/Connman"
                print_info "ConnMan est une alternative à NetworkManager et Wicd. Il a été créé par Intel et le projet Moblin."
                package_install "connman "
                #ConnMan daemon
                systemctl disable dhcpcd.service
                systemctl disable network_ip_statique.service
                systemctl disable netcfg
                systemctl enable connman.service
                pause_function
              ;;
        esac
    }
    #}}}
    # 17 ACCESSORIES {{{
    install_accessories_apps() {
    while true
    do
        print_title "APPLICATIONS ACCESSOIRES"
        echo " 1) $(menu_item "conky" "Conky")"
        echo " 2) $(menu_item "docky" "Docky-Dock")"
        echo ""
        echo " f) FINI"
        echo ""
        ACCESSORIES_OPTIONS+=" f"
        read_input_options "$ACCESSORIES_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "conky"
##
# TODO
# A REVOIR ~/00-Conky
##
                    ;;
                2)
                    package_install "docky"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 17 SYSTEM TOOLS {{{
    install_system_apps() {
    while true
    do
        print_title "OUTILS SYSTÈME"
        echo " 1) $(menu_item "gparted")"
        echo " 2) $(menu_item "grsync")"
        echo " 3) $(menu_item "htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile")"
        echo " 4) $(menu_item "lm_sensors")"
        echo " 5) $(menu_item "hddtemp gnu-netcat")"
        echo " 6) $(menu_item "gsmartcontrol" "S.M.A.R.T.")"
        echo " 7) $(menu_item "hdparm bonnie++")"
        echo " 8) $(menu_item "cpupower")"
        echo " 9) $(menu_item "pacnew_scripts")"
        echo "10) $(menu_item "mesa-demos")"
        echo "11) $(menu_item "syslog-ng")"
        echo ""
        echo " f) FINI"
        echo ""
        SYSTEMTOOLS_OPTIONS+=" f"
        read_input_options "$SYSTEMTOOLS_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "gparted gptfdisk"
		    mkdir -p /home/${USERNAME}/.local/share/applications
		    cp -v ai-fconfig/kde-user-gparted.desktop /home/${USERNAME}/.local/share/applications/gparted.desktop
		    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                2)
                    package_install "grsync"
                    ;;
                3)
                    package_install "htop lshw hwinfo dmidecode dfc expac pkgfile"
                    package_install "lsof strace"
                    ;;
                4)
                    package_install "lm_sensors rrdtool"
		    print_info_cyan "LM_SENSORS - sensors-detect : détections des capteurs."
		    pause_function
		    sensors-detect
		    systemctl enable lm_sensors.service
                    ;;
                5)
                    package_install "hddtemp gnu-netcat"
		    systemctl enable hddtemp.service
                    ;;
                6)
                    package_install "gsmartcontrol"
                    mkdir -p /home/${USERNAME}/.local/share/applications
                    cp -v ai-fconfig/kde-user-gsmartcontrol.desktop /home/${USERNAME}/.local/share/applications/gsmartcontrol.desktop
                    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                7)
                    package_install "hdparm bonnie++"
                    ;;
                8)
                    print_info_cyan "Cpupower : Ne pas installer si Intel I7-4770K Haswell."
                    read_input_text "Installer cpupower ?"
                    if [[ $OPTION == o ]]; then
                        package_install "cpupower"
                        systemctl enable cpupower.service
                    fi
                    ;;
                9)
                    package_install "pacnew_scripts"
                    ;;
                10)
                    package_install "mesa-demos"
                    ;;
                11)
                    package_install "syslog-ng"
                    systemctl enable syslog-ng.service
                    gpasswd -a ${USERNAME} log
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 18 DEVELOPEMENT {{{
    install_development_apps() {
    while true
    do
        print_title "APPLICATIONS DE DÉVELOPPEMENT"
        echo " 1) $(menu_item "kdevelop")"
        echo " 2) $(menu_item "qtcreator")"
        echo " 3) $(menu_item "devtools")"
        echo " 4) $(menu_item "gdb" "Debugger Tools")"
        echo " 5) $(menu_item "git subversion")"
        echo " 6) $(menu_item "cmake")"
        echo ""
        echo " f) FINI"
        echo ""
        DEVELOPMENT_OPTIONS+=" f"
        read_input_options "$DEVELOPMENT_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "kdevelop"
                    ;;
                2)
                    package_install "qtcreator qt qt5-doc libxkbcommon-x11"
                    ;;
                3)
                    package_install "devtools"
                    ;;
                4)
                    package_install "valgrind gdb splint tidyhtml"
                    ;;
                5)
                    package_install "git subversion"
                    ;;
                6)
                    package_install "cmake"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 19 OFFICE {{{
    install_office_apps() {
    while true
    do
        print_title "APPLICATIONS DE BUREAUTIQUE"
        echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
        echo " 2) $(menu_item "calligra" "Calligra office suite")"
        echo ""
        echo " f) FINI"
        echo ""
        OFFICE_OPTIONS+=" f"
        read_input_options "$OFFICE_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
                    package_install "libreoffice-$LANGUAGE_LO libreoffice-common libreoffice-base libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-math libreoffice-writer"
                    package_install "libreoffice-gnome libwpg"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
		    cp -v ai-fconfig/etc-profile.d-openoffice.sh /etc/profile.d/openoffice.sh
		    chmod a+x /etc/profile.d/openoffice.sh
                    ;;
                2)
                    package_install "calligra calligra-l10n-fr"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 20 GRAPHICS {{{
    install_graphics_apps() {
    while true
    do
        print_title "APPLICATIONS GRAPHIQUES"
        echo " 1) $(menu_item "blender")"
        echo " 2) $(menu_item "gimp")"
        echo " 3) $(menu_item "inkscape")"
        echo ""
        echo " f) FINI"
        echo ""
        GRAPHICS_OPTIONS+=" f"
        read_input_options "$GRAPHICS_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "blender"
                    if [[ $IN_VIRTUAL_BOX -eq 0 ]]; then
                        is_package_installed "nvidia" && package_install "cuda opencl-nvidia"
                    fi
                    ;;
                2)
                    package_install "gimp"
                    package_install "potrace gimp-ufraw gimp-plugin-fblur gimp-plugin-gmic gimp-plugin-lqr gimp-plugin-mathmap gimp-plugin-wavelet-decompose gimp-plugin-wavelet-denoise gimp-refocus"
                    ;;
                3)
                    package_install "inkscape uniconvertor"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 21 INTERNET {{{
    install_internet_apps() {
    while true
    do
        print_title "BROWSER - DOWNLOAD/FILESHARE - EMAIL - INSTANT MESSAGING - IRC"
        echo " 1) $(menu_item "chromium")"
        echo " 2) $(menu_item "rekonq")"
        echo " 3) $(menu_item "firefox")"
        echo " 4) $(menu_item "opera")"
        echo " 5) $(menu_item "transmission-qt")"
        echo " 6) $(menu_item "dropbox") $AUR"
        echo " 7) $(menu_item "thunderbird")"
        echo " 8) $(menu_item "emesene")"
        echo " 9) $(menu_item "quassel")"
        echo "10) $(menu_item "konversation")"
        echo ""
        echo " f) FINI"
        echo ""
        BROWSERS_OPTIONS+=" f"
        read_input_options "$BROWSERS_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "chromium icedtea-web-java7"
                    aur_package_install "chromium-pepper-flash chromium-libpdf"
                    ;;
                2)
                    package_install "rekonq icedtea-web-java7"
                    ;;
                3)
                    package_install "firefox firefox-i18n-$LANGUAGE_FF firefox-adblock-plus flashplugin icedtea-web-java7"
#                    aur_package_install "firefox-extension-https-everywhere"
                    ;;
                4)
                    package_install "opera flashplugin icedtea-web-java7"
                    ;;
                5)
                    package_install "transmission-qt"
                    ;;
                6)
                    aur_package_install "dropbox"
                    aur_package_install "kfilebox"
                    aur_package_install "systemd-dropbox-daemon"
                    systemctl enable dropboxd.service
                    ;;
                7)
                    package_install "thunderbird thunderbird-i18n-$LANGUAGE_FF"
                    ;;
                8)
                    package_install "emesene"
                    ;;
                9)
                    package_install "quassel"
                    ;;
                10)
                    package_install "konversation"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 22 AUDIO {{{
    install_audio_apps() {
    while true
    do
        print_title "APPLICATIONS AUDIO"
        echo " 1) $(menu_item "amarok")"
        echo " 2) $(menu_item "clementine")"
        echo " 3) $(menu_item "soundkonverter")"
        echo " 4) $(menu_item "audacity")"
        echo " 5) $(menu_item "gst-plugins-base" "Gstreamer")"
        echo ""
        echo " f) FINI"
        echo ""
        AUDIO_OPTIONS+=" f"
        read_input_options "$AUDIO_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "amarok"
                    ;;
                2)
                    package_install "clementine"
                    ;;
                3)
                    package_install "soundkonverter"
                    ;;
                4)
                    package_install "audacity"
                    ;;
                5)
                    package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mpg123 flac"
                    if is_package_installed "amarok banshee clementine exaile rhythmbox xfburn" ; then
                        package_install "gstreamer0.10 gstreamer0.10-plugins"
                    fi
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 23 VIDEO {{{
    install_video_apps() {
    while true
    do
        print_title "APPLICATIONS VIDEO"
        echo " 1) $(menu_item "vlc")"
        echo " 2) $(menu_item "kdenlive")"
        echo " 3) $(menu_item "libbluray libquicktime libdvdread libdvdnav libdvdcss libaacs cdrdao" "DVD Libs")"
        echo ""
        echo " f) FINI"
        echo ""
        VIDEO_OPTIONS+=" f"
        read_input_options "$VIDEO_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "vlc libdvdcss libva-vdpau-driver opus"
                    ;;
                2)
                    package_install "kdenlive"
                    ;;
                3)
                    package_install "libbluray libquicktime libdvdread libdvdnav libdvdcss libaacs cdrdao"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 22-23 AUDIO-VIDEO {{{
        install_audio_video_apps() {
        while true
        do
            print_title "APPLICATIONS AUDIO/VIDEO POUR KDE"
            echo " 1) $(menu_item "digikam")"
            echo " 2) $(menu_item "k3b")"
            echo ""
            echo " f) FINI"
            echo ""
            AUDIO_VIDEO_OPTIONS+=" f"
            read_input_options "$AUDIO_VIDEO_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        package_install "digikam"
                        ;;
                    2)
                        package_install "k3b cdrdao dvd+rw-tools vcdimager transcode emovix cdparanoia"
                        ;;
                    "f")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
        elihw
        done
        }
    # 24 GAMES {{{
    install_games() {
##
# A REVOIR jndqrami sur un repo perso
# TODO
##
    while true
    do
        print_title "JEUX"
        echo " 1) $(menu_item "pokerth" "Poker TH")"
        echo ""
        echo " f) FINI"
        echo ""
        GAME_OPTIONS+=" f"
        read_input_options "$GAME_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "pokerth"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
#}}}}
